// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/genku-m/upsider-cording-test/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInvoiceUsecase is a mock of InvoiceUsecase interface.
type MockInvoiceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceUsecaseMockRecorder
}

// MockInvoiceUsecaseMockRecorder is the mock recorder for MockInvoiceUsecase.
type MockInvoiceUsecaseMockRecorder struct {
	mock *MockInvoiceUsecase
}

// NewMockInvoiceUsecase creates a new mock instance.
func NewMockInvoiceUsecase(ctrl *gomock.Controller) *MockInvoiceUsecase {
	mock := &MockInvoiceUsecase{ctrl: ctrl}
	mock.recorder = &MockInvoiceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceUsecase) EXPECT() *MockInvoiceUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInvoiceUsecase) Create(ctx context.Context, PublishDate time.Time, Payment uint64, CommissionTaxRate, TaxRate float64, PaymentDate time.Time) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, PublishDate, Payment, CommissionTaxRate, TaxRate, PaymentDate)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInvoiceUsecaseMockRecorder) Create(ctx, PublishDate, Payment, CommissionTaxRate, TaxRate, PaymentDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvoiceUsecase)(nil).Create), ctx, PublishDate, Payment, CommissionTaxRate, TaxRate, PaymentDate)
}

// List mocks base method.
func (m *MockInvoiceUsecase) List(ctx context.Context, companyGUID string, firstPaymentDate, lastPaymentDate time.Time) ([]*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, companyGUID, firstPaymentDate, lastPaymentDate)
	ret0, _ := ret[0].([]*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInvoiceUsecaseMockRecorder) List(ctx, companyGUID, firstPaymentDate, lastPaymentDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInvoiceUsecase)(nil).List), ctx, companyGUID, firstPaymentDate, lastPaymentDate)
}
